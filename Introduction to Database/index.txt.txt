1. What is a database? Explain with an example on why should we need a database.
A database is like a smart storage system where you can organize, manage, and quickly access a large amount of information.

Example: Imagine a college trying to manage student details like names, roll numbers, marks, attendance, etc. Using Excel or paper files becomes messy, especially when there are thousands of students. A database stores all this data in one place in a neat and searchable format.

Why we need it:

Easy to search and retrieve data

Avoids repetition and mismatches

Keeps data secure and up to date

Can be used by many people at the same time



2. Write a short note on file-based storage system. Explain the major challenges of a file-based storage system.
A file-based system is the old way of storing data, where each application saves information in its own files (like .txt or .csv). Each program manages its own data without talking to others.

Major problems:

Duplicate Data: Same info stored in multiple files

Mismatch: If one file is updated but others are not, the data becomes inconsistent

Hard to connect data: It's tough to bring related info together from different files

Slow and messy access: Need to write complex code to fetch or update data

No proper security: Anyone can open files and make changes without control





3. What is DBMS? What was the need for DBMS?
A DBMS (Database Management System) is software that helps you create and manage databases easily. It acts as a bridge between users and the actual data.

Why we needed it:

To fix the problems of file-based systems

To store everything in one place without duplication

To ensure all users see the same up-to-date data

To provide login and security features

To let multiple users work with data at the same time



4. Explain 5 challenges of file-based storage system which was tackled by DBMS.
Here are 5 key issues in file systems and how DBMS solved them:

Duplicate data – DBMS stores data centrally to avoid repetition

Inconsistent data – DBMS ensures updates happen in one place, so no mismatches

Security risks – DBMS controls who can see or change what

Limited access – DBMS allows many users to use the data together

Difficult search – DBMS provides tools like SQL for quick and easy searches





5. List out the different types of classification in DBMS and explain.
DBMS can be grouped based on different things:

A. Based on Data Model:

Hierarchical: Like a family tree – one parent, many children

Network: Like a web – records can be linked in multiple ways

Relational: Uses tables (most common)

Object-Oriented: Stores data as objects, like in programming

B. Based on Users:

Single-user: One person at a time

Multi-user: Many people can access the database at once

C. Based on Location:

Centralized: Everything is stored in one place

Distributed: Data is stored at different locations but works together





6. What is the significance of Data Modelling and explain the types of Data Modelling.
Data modelling is the process of planning how to store and organize data. It helps make sure the database is efficient, accurate, and easy to understand.

Types of Data Modelling:

Conceptual Model: High-level overview of what data we’re working with (like drawing a map before a journey)

Logical Model: Adds details like attributes, relationships, and keys (like planning routes on the map)

Physical Model: Shows how the data will actually be stored in the database (like building roads and structures on the map)





7. Explain 3 schema architecture along with its advantages.
The 3-schema architecture is a way to separate how data is stored, used, and seen. It has three levels:

External Level (View Level):

What individual users see

Different people can have different views of the same data

Conceptual Level (Logical View):

Shows all the data and relationships

Independent of physical details

Internal Level (Physical View):

Describes how data is actually saved in the system (like files, indexes, etc.)

Advantages:

Simplicity: Users don’t need to know how data is stored

Flexibility: Changes in storage don’t affect how users see data

Security: Can hide sensitive data by controlling user views











